// Compiled by ClojureScript 0.0-2138
goog.provide('lt.util.cljs');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('clojure.string');
cljs.core._STAR_print_fn_STAR_ = (function (x){if(cljs.core.truth_((function (){var and__3396__auto__ = x;if(cljs.core.truth_(and__3396__auto__))
{return (cljs.core.not_EQ_.call(null,x,"")) && (cljs.core.not_EQ_.call(null,x,"\n"));
} else
{return and__3396__auto__;
}
})()))
{return console.log(clojure.string.trim.call(null,x));
} else
{return null;
}
});
cljs.core.ChunkedCons.prototype.cljs$core$INext$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = (function (this$){var this$__$1 = this;return cljs.core._seq.call(null,cljs.core._rest.call(null,this$__$1));
});
(cljs.core.ISeqable["null"] = true);
(cljs.core._seq["null"] = (function (coll){return null;
}));
cljs.core.RSeq.prototype.cljs$core$INext$ = true;
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = (function (this$){var this$__$1 = this;return cljs.core._seq.call(null,cljs.core._rest.call(null,this$__$1));
});
global.String.prototype.cljs$core$ISeqable$ = true;
global.String.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){var coll__$1 = this;if(cljs.core.truth_((function (){var and__3396__auto__ = coll__$1;if(cljs.core.truth_(and__3396__auto__))
{return !((coll__$1.length === 0));
} else
{return and__3396__auto__;
}
})()))
{return (new cljs.core.IndexedSeq((new String(coll__$1)),0));
} else
{return null;
}
});
global.String.prototype.cljs$core$IFn$ = true;
global.String.prototype.call = (function() {
var G__14685 = null;
var G__14685__2 = (function (self__,coll){var self____$1 = this;var this$ = self____$1;return cljs.core.get.call(null,coll,this$.toString());
});
var G__14685__3 = (function (self__,coll,not_found){var self____$1 = this;var this$ = self____$1;return cljs.core.get.call(null,coll,this$.toString(),not_found);
});
G__14685 = function(self__,coll,not_found){
switch(arguments.length){
case 2:
return G__14685__2.call(this,self__,coll);
case 3:
return G__14685__3.call(this,self__,coll,not_found);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
return G__14685;
})()
;
global.String.prototype.apply = (function (self__,args14684){var self____$1 = this;return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone.call(null,args14684)));
});
global.String.prototype.cljs$core$IFn$_invoke$arity$1 = (function (coll){var this$ = this;return cljs.core.get.call(null,coll,this$.toString());
});
global.String.prototype.cljs$core$IFn$_invoke$arity$2 = (function (coll,not_found){var this$ = this;return cljs.core.get.call(null,coll,this$.toString(),not_found);
});
global.String.prototype.apply = (function (s,args){if((args.length < 2))
{return cljs.core.get.call(null,(args[0]),s);
} else
{return cljs.core.get.call(null,(args[0]),s,(args[1]));
}
});
global.Array.prototype.cljs$core$ISeqable$ = true;
global.Array.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){var coll__$1 = this;if(cljs.core.truth_((function (){var and__3396__auto__ = coll__$1;if(cljs.core.truth_(and__3396__auto__))
{return !((coll__$1.length === 0));
} else
{return and__3396__auto__;
}
})()))
{return (new cljs.core.IndexedSeq(coll__$1,0));
} else
{return null;
}
});
/**
* @param {...*} var_args
*/
lt.util.cljs.__GT_dottedkw = (function() { 
var __GT_dottedkw__delegate = function (args){return cljs.core.keyword.call(null,clojure.string.join.call(null,".",cljs.core.map.call(null,cljs.core.name,cljs.core.filter.call(null,cljs.core.identity,args))));
};
var __GT_dottedkw = function (var_args){
var args = null;if (arguments.length > 0) {
  args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);} 
return __GT_dottedkw__delegate.call(this,args);};
__GT_dottedkw.cljs$lang$maxFixedArity = 0;
__GT_dottedkw.cljs$lang$applyTo = (function (arglist__14686){
var args = cljs.core.seq(arglist__14686);
return __GT_dottedkw__delegate(args);
});
__GT_dottedkw.cljs$core$IFn$_invoke$arity$variadic = __GT_dottedkw__delegate;
return __GT_dottedkw;
})()
;
/**
* Recursively transforms JavaScript arrays into ClojureScript
* vectors, and JavaScript objects into ClojureScript maps.  With
* option ':keywordize-keys true' will convert object fields from
* strings to keywords.
* @param {...*} var_args
*/
lt.util.cljs.js__GT_clj = (function() {
var js__GT_clj = null;
var js__GT_clj__1 = (function (x){return js__GT_clj.call(null,x,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",4191781672),false], null));
});
var js__GT_clj__2 = (function() { 
var G__14707__delegate = function (x,opts){if((function (){var G__14697 = x;if(G__14697)
{var bit__4052__auto__ = null;if(cljs.core.truth_((function (){var or__3408__auto__ = bit__4052__auto__;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return G__14697.cljs$core$IEncodeClojure$;
}
})()))
{return true;
} else
{if((!G__14697.cljs$lang$protocol_mask$partition$))
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeClojure,G__14697);
} else
{return false;
}
}
} else
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeClojure,G__14697);
}
})())
{return cljs.core._js__GT_clj.call(null,x,cljs.core.apply.call(null,cljs.core.array_map,opts));
} else
{if(cljs.core.seq.call(null,opts))
{var map__14698 = opts;var map__14698__$1 = ((cljs.core.seq_QMARK_.call(null,map__14698))?cljs.core.apply.call(null,cljs.core.hash_map,map__14698):map__14698);var force_obj = cljs.core.get.call(null,map__14698__$1,new cljs.core.Keyword(null,"force-obj","force-obj",2540778119));var keywordize_keys = cljs.core.get.call(null,map__14698__$1,new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",4191781672));var keyfn = (cljs.core.truth_(keywordize_keys)?cljs.core.keyword:cljs.core.str);var f = ((function (map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn){
return (function thisfn(x__$1){if(cljs.core.seq_QMARK_.call(null,x__$1))
{return cljs.core.doall.call(null,cljs.core.map.call(null,thisfn,x__$1));
} else
{if(cljs.core.coll_QMARK_.call(null,x__$1))
{return cljs.core.into.call(null,cljs.core.empty.call(null,x__$1),cljs.core.map.call(null,thisfn,x__$1));
} else
{if((x__$1 instanceof cljs.core.Keyword))
{return x__$1;
} else
{if((x__$1 instanceof Array) || ((cljs.core.type.call(null,x__$1) === global.Array)))
{return cljs.core.vec.call(null,cljs.core.map.call(null,thisfn,x__$1));
} else
{if(cljs.core.truth_((function (){var or__3408__auto__ = force_obj;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return ((x__$1 === Object(x__$1))) || ((cljs.core.type.call(null,x__$1) === Object)) || ((cljs.core.type.call(null,x__$1) === global.Object));
}
})()))
{return cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4119__auto__ = ((function (map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn){
return (function iter__14703(s__14704){return (new cljs.core.LazySeq(null,((function (map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn){
return (function (){var s__14704__$1 = s__14704;while(true){
var temp__4092__auto__ = cljs.core.seq.call(null,s__14704__$1);if(temp__4092__auto__)
{var s__14704__$2 = temp__4092__auto__;if(cljs.core.chunked_seq_QMARK_.call(null,s__14704__$2))
{var c__4117__auto__ = cljs.core.chunk_first.call(null,s__14704__$2);var size__4118__auto__ = cljs.core.count.call(null,c__4117__auto__);var b__14706 = cljs.core.chunk_buffer.call(null,size__4118__auto__);if((function (){var i__14705 = 0;while(true){
if((i__14705 < size__4118__auto__))
{var k = cljs.core._nth.call(null,c__4117__auto__,i__14705);cljs.core.chunk_append.call(null,b__14706,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null,k),thisfn.call(null,(x__$1[k]))], null));
{
var G__14708 = (i__14705 + 1);
i__14705 = G__14708;
continue;
}
} else
{return true;
}
break;
}
})())
{return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__14706),iter__14703.call(null,cljs.core.chunk_rest.call(null,s__14704__$2)));
} else
{return cljs.core.chunk_cons.call(null,cljs.core.chunk.call(null,b__14706),null);
}
} else
{var k = cljs.core.first.call(null,s__14704__$2);return cljs.core.cons.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null,k),thisfn.call(null,(x__$1[k]))], null),iter__14703.call(null,cljs.core.rest.call(null,s__14704__$2)));
}
} else
{return null;
}
break;
}
});})(map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn))
,null,null));
});})(map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn))
;return iter__4119__auto__.call(null,cljs.core.js_keys.call(null,x__$1));
})());
} else
{if(new cljs.core.Keyword(null,"else","else",1017020587))
{return x__$1;
} else
{return null;
}
}
}
}
}
}
});})(map__14698,map__14698__$1,force_obj,keywordize_keys,keyfn))
;return f.call(null,x);
} else
{return null;
}
}
};
var G__14707 = function (x,var_args){
var opts = null;if (arguments.length > 1) {
  opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1),0);} 
return G__14707__delegate.call(this,x,opts);};
G__14707.cljs$lang$maxFixedArity = 1;
G__14707.cljs$lang$applyTo = (function (arglist__14709){
var x = cljs.core.first(arglist__14709);
var opts = cljs.core.rest(arglist__14709);
return G__14707__delegate(x,opts);
});
G__14707.cljs$core$IFn$_invoke$arity$variadic = G__14707__delegate;
return G__14707;
})()
;
js__GT_clj = function(x,var_args){
var opts = var_args;
switch(arguments.length){
case 1:
return js__GT_clj__1.call(this,x);
default:
return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
}
throw(new Error('Invalid arity: ' + arguments.length));
};
js__GT_clj.cljs$lang$maxFixedArity = 1;
js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
return js__GT_clj;
})()
;
/**
* Recursively transforms ClojureScript values to JavaScript.
* sets/vectors/lists become Arrays, Keywords and Symbol become Strings,
* Maps become Objects. Arbitrary keys are encoded to by key->js.
*/
lt.util.cljs.clj__GT_js = (function clj__GT_js(x){if((x == null))
{return null;
} else
{if((function (){var G__14719 = x;if(G__14719)
{var bit__4052__auto__ = null;if(cljs.core.truth_((function (){var or__3408__auto__ = bit__4052__auto__;if(cljs.core.truth_(or__3408__auto__))
{return or__3408__auto__;
} else
{return G__14719.cljs$core$IEncodeJS$;
}
})()))
{return true;
} else
{if((!G__14719.cljs$lang$protocol_mask$partition$))
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeJS,G__14719);
} else
{return false;
}
}
} else
{return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.IEncodeJS,G__14719);
}
})())
{return cljs.core._clj__GT_js.call(null,x);
} else
{if((x instanceof cljs.core.Keyword))
{return cljs.core.name.call(null,x);
} else
{if((x instanceof cljs.core.Symbol))
{return [cljs.core.str(x)].join('');
} else
{if(cljs.core.map_QMARK_.call(null,x))
{var m = (function (){var obj14721 = {};return obj14721;
})();var seq__14722_14728 = cljs.core.seq.call(null,x);var chunk__14723_14729 = null;var count__14724_14730 = 0;var i__14725_14731 = 0;while(true){
if((i__14725_14731 < count__14724_14730))
{var vec__14726_14732 = cljs.core._nth.call(null,chunk__14723_14729,i__14725_14731);var k_14733 = cljs.core.nth.call(null,vec__14726_14732,0,null);var v_14734 = cljs.core.nth.call(null,vec__14726_14732,1,null);(m[cljs.core.key__GT_js.call(null,k_14733)] = clj__GT_js.call(null,v_14734));
{
var G__14735 = seq__14722_14728;
var G__14736 = chunk__14723_14729;
var G__14737 = count__14724_14730;
var G__14738 = (i__14725_14731 + 1);
seq__14722_14728 = G__14735;
chunk__14723_14729 = G__14736;
count__14724_14730 = G__14737;
i__14725_14731 = G__14738;
continue;
}
} else
{var temp__4092__auto___14739 = cljs.core.seq.call(null,seq__14722_14728);if(temp__4092__auto___14739)
{var seq__14722_14740__$1 = temp__4092__auto___14739;if(cljs.core.chunked_seq_QMARK_.call(null,seq__14722_14740__$1))
{var c__4150__auto___14741 = cljs.core.chunk_first.call(null,seq__14722_14740__$1);{
var G__14742 = cljs.core.chunk_rest.call(null,seq__14722_14740__$1);
var G__14743 = c__4150__auto___14741;
var G__14744 = cljs.core.count.call(null,c__4150__auto___14741);
var G__14745 = 0;
seq__14722_14728 = G__14742;
chunk__14723_14729 = G__14743;
count__14724_14730 = G__14744;
i__14725_14731 = G__14745;
continue;
}
} else
{var vec__14727_14746 = cljs.core.first.call(null,seq__14722_14740__$1);var k_14747 = cljs.core.nth.call(null,vec__14727_14746,0,null);var v_14748 = cljs.core.nth.call(null,vec__14727_14746,1,null);(m[cljs.core.key__GT_js.call(null,k_14747)] = clj__GT_js.call(null,v_14748));
{
var G__14749 = cljs.core.next.call(null,seq__14722_14740__$1);
var G__14750 = null;
var G__14751 = 0;
var G__14752 = 0;
seq__14722_14728 = G__14749;
chunk__14723_14729 = G__14750;
count__14724_14730 = G__14751;
i__14725_14731 = G__14752;
continue;
}
}
} else
{}
}
break;
}
return m;
} else
{if(cljs.core.coll_QMARK_.call(null,x))
{return cljs.core.apply.call(null,cljs.core.array,cljs.core.map.call(null,clj__GT_js,x));
} else
{if(new cljs.core.Keyword(null,"else","else",1017020587))
{return x;
} else
{return null;
}
}
}
}
}
}
}
});
lt.util.cljs.str_contains_QMARK_ = (function str_contains_QMARK_(str,x){return (str.indexOf(x) > -1);
});
lt.util.cljs.index_of = (function index_of(e,coll){return cljs.core.first.call(null,cljs.core.keep_indexed.call(null,(function (p1__14754_SHARP_,p2__14753_SHARP_){if(cljs.core._EQ_.call(null,e,p2__14753_SHARP_))
{return p1__14754_SHARP_;
} else
{return null;
}
}),coll));
});
